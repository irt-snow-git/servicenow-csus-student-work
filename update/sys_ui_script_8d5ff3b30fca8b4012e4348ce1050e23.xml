<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Controller for Submission page.</description>
        <global>false</global>
        <name>x_casus_swt.angular_controller</name>
        <script><![CDATA[var myApp = angular.module('myApp', []);
var workTypeReferences = [];
workTypeReferences = getWorkTypeReferences(); 

// - - - Begin Controller - - - //
myApp.controller('StudentWorkController', ['$scope', function ($scope) {
	$scope.async = 0;
	$scope.works = [];
	$scope.works = workTypeReferences;
	$scope.otherSysID = otherSysID; // For submitting other aka misc work types that don't exist yet
	$scope.customOrder = "name";
	$scope.isPopupVisible = false;
	$scope.isPopupReady = false;
	$scope.activeWorkID = "";      // When popup is active, this has the current work type obj (and sys_id)
	$scope.short_description = ''; 
	$scope.faculty_name = ''; 
	$scope.relevant_course = '';
	$scope.async = 1;
	// - - - - End Init - - - -//
	
	// - - - - Functions - - -//
	$scope.pin = function (work) {	
		if (work.pinned == '0') {work.pinned = '1';} else {work.pinned = '0';}
		var ajax = new GlideAjax('x_casus_swt.retrieveSubmitRecords');
			ajax.addParam('sysparm_name','pinWorkType');
			ajax.addParam('sysparm_work', work.sys_id);
			ajax.getXML(function ()  {
			});
		
	};
	
	/* Use: Actually does ajax call to Script Include to submit the record
		Parameter: work -> expects a javascript object
	*/
	$scope.submit = function (work) {			
			//Call to server to actually submit
			var ajax = new GlideAjax('x_casus_swt.retrieveSubmitRecords');
			ajax.addParam('sysparm_name','submitRecord');
			ajax.addParam('sysparm_work', work.sys_id);
			ajax.addParam('sysparm_faculty', $scope.faculty_name);
			ajax.addParam('sysparm_course', $scope.relevant_course);
			ajax.addParam('sysparm_other_info', $scope.short_description);
			ajax.getXML(function ()  { });
			//Some magic math to give low scores a bigger boost in popularity, higher scores less
			//This is done server-side, but do it client side too for responsiveness
			var currentScore = parseInt(work.popularity);
			var numSub = Math.floor(currentScore + (Math.log(currentScore) * 15));
			var bonus = Math.round(80/(numSub-currentScore)) + 1;
			if (bonus === Infinity) bonus = 15; //Edge case
			work.popularity = currentScore + bonus;	
			$scope.closePopup();
	};
	
	$scope.submitOther = function () {
		var ajax = new GlideAjax('x_casus_swt.retrieveSubmitRecords');
		ajax.addParam('sysparm_name','submitRecord');
		ajax.addParam('sysparm_work', $scope.otherSysID);
		ajax.addParam('sysparm_faculty', $scope.faculty_name);
		ajax.addParam('sysparm_course', $scope.relevant_course);
		ajax.addParam('sysparm_other_info', $scope.short_description);
		ajax.getXML(function ()  { });
		$scope.closePopup();
	};
	$scope.openPopup = function (workObj) {
		$scope.isPopupVisible = true;
		//Since this can be called without a workOobj, check to see if null
		if (workObj) {
			$scope.activeWorkID = workObj;
			console.log("Popup Active with work id -> " + workObj.name);
		}
		//Get focus after delay so element is attached to DOM 
		setTimeout(function() { $('faculty_input').focus(); $scope.isPopupReady = true; }, 200);
	};
	$scope.closePopup = function () {
		$scope.isPopupVisible = false;
		//Reset fields to blank
		$scope.faculty_name = '';
		$scope.relevant_course = '';
		$scope.short_description = '';
		$scope.activeWorkID = "";
		$scope.isPopupReady = false;
	};
	// - - -END Functions - - - //
}])// - - -END Controller- - - //

// - - - Begin Directives - - - //

/* Checks whether the user clicks outside the popup */

.directive('clickOutside', function ($document) {
	return {
		restrict: 'C',
		link: function (scope, el, attr) {
			
			scope.clickOutside = function () {
				scope.closePopup();
			};
			
			$document.on('click', function (e) {
				if (el !== e.target && !el[0].contains(e.target) && scope.isPopupReady == true) {
					scope.$apply(function () {
						scope.$eval(scope.clickOutside);
					});
				}
			});
		}
	};
})

.directive('focus', function($timeout) {
	return {
		scope : {
			trigger : '@focus'
		},
		link : function(scope, element) {
			scope.$watch('trigger', function(value) {
				if (value === "true") {
					$timeout(function() {
						element[0].focus();
					});
				}
			});
		}
	};
}) // - - - End Directives - - - //

;//- - - - -End App- - - - -//


// - - - Handlers and Other Functions - - - //

function handleGetWorkTypes(response) {
	var workTypes = response.responseXML.getElementsByTagName("work");
	for (var i = 0; i < workTypes.length; i++ ) {
		//Temp object to push
		var ref = {
			"sys_id":"",
			"popularity":"",
			"pinned": "",
			"name":""
		};
		//Fill temp obj with values from XML
		ref.sys_id = workTypes[i].getAttribute("sys_id");
		ref.name = workTypes[i].getAttribute("name");
		ref.popularity = parseInt(workTypes[i].getAttribute("popularity"));
		ref.pinned = workTypes[i].getAttribute("pinned");
		//Magic string, should set it somewhere - Basically checking for the "Other" work
		if (workTypes[i].getAttribute("name") != 'Other') {
			workTypeReferences.push(ref);
		} else {
			otherSysID = workTypes[i].getAttribute("sys_id");
		}
	}//End For//
}

/*
Uses a global variable to store all the supplies
*/
function getWorkTypeReferences() {
	var ajax = new GlideAjax('x_casus_swt.retrieveSubmitRecords');
	ajax.addParam('sysparm_name','getWorkTypes');
	ajax.getXML(handleGetWorkTypes);
	ajax.getXMLWait();
	//Now references should be set and angular can use them
	return workTypeReferences;
}]]></script>
        <script_name>angular_controller</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>gg622</sys_created_by>
        <sys_created_on>2017-11-02 22:32:42</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>8d5ff3b30fca8b4012e4348ce1050e23</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>x_casus_swt.angular_controller</sys_name>
        <sys_package display_value="Student Work Tracking" source="x_casus_swt">c2b3b3fb0f8a8b4012e4348ce1050e9b</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Student Work Tracking">c2b3b3fb0f8a8b4012e4348ce1050e9b</sys_scope>
        <sys_update_name>sys_ui_script_8d5ff3b30fca8b4012e4348ce1050e23</sys_update_name>
        <sys_updated_by>gg622</sys_updated_by>
        <sys_updated_on>2017-11-08 00:52:41</sys_updated_on>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
